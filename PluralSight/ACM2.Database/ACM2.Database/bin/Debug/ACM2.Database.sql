/*
Deployment script for ACM2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ACM2"
:setvar DefaultFilePrefix "ACM2"
:setvar DefaultDataPath "C:\Users\glena\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\ProjectsV12\"
:setvar DefaultLogPath "C:\Users\glena\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\ProjectsV12\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
--:r ".\CustomerType.data.sql"

SET IDENTITY_INSERT [CustomerType] ON
GO

--Reference Data for CustomerType
MERGE INTO CustomerType AS Target
USING (VALUES
	(1, N'Corporation', 1),
	(2, N'Individual', 1),
	(3, N'Educator', 1)
)
AS Source (CustomerTypeId, [Description], IsSystem)
ON Target.CustomerTypeId = Source.CustomerTypeId

--update matched rows
WHEN MATCHED THEN
UPDATE SET [Description] = Source.[Description],
	IsSystem = Source.IsSystem

--insert new rows
WHEN NOT MATCHED BY TARGET THEN
INSERT (CustomerTypeId,
		[Description],
		IsSystem)
VALUES (Source.CustomerTypeId,
		Source.[Description],
		Source.IsSystem);

--delete rows that are in the target but not in the source
--WHEN NOT MATCHED BY SOURCE THEN
--DELETE;

GO

SET IDENTITY_INSERT [CustomerType] OFF
GO

GO

GO
PRINT N'Update complete.';


GO
